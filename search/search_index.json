{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pydantic Settings AWS","text":"<p>Pydantic Settings AWS is an extension of the great \ud83d\ude80 Pydantic Settings library.</p> <p>It offers an easy way to load your settings hosted in \u2601\ufe0f AWS Secrets Manager and Parameter Store.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install pydantic-settings-aws with pip:</p> <pre><code>pip install pydantic-settings-aws\n</code></pre> <p><code>pydantic-settings-aws</code> will install some dependencies for you:</p> <ul> <li>pydantic &gt;= 2.0.1</li> <li>pydantic-settings &gt;= 2.0.2</li> <li>boto3 &gt;= 1.27.0</li> <li>boto3-stubs[secretsmanager] &gt;= 1.27.0</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Using pydantic-settings-aws can be as easy as:</p> no boto3with boto3 clientwith profile settings.py<pre><code># import pydantic_settings_aws\nfrom pydantic_settings_aws import SecretsManagerBaseSettings\n\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\" # just put your secrets manager name\n    )\n\n    username: str\n    password: str\n\n\nsettings = AWSSecretsSettings()\n</code></pre> settings.py<pre><code>import boto3\nfrom pydantic_settings_aws import SecretsManagerBaseSettings\n\nclient = boto3.client(\"secretsmanager\")\n\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\", # just put your secrets manager name\n        secrets_client=client # pass your already created boto3 client\n    )\n\n    username: str\n    password: str\n\n\nsettings = AWSSecretsSettings()\n</code></pre> settings.py<pre><code>from pydantic_settings_aws import SecretsManagerBaseSettings\n\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        aws_region=\"us-east-1\",\n        aws_profile=\"dev\"\n    )\n\n    username: str\n    password: str\n\n\nsettings = AWSSecretsSettings()\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>\ud83d\udea7 Work in Progress</p> <p>This page is a work in progress.</p> <p>               Bases: <code>BaseSettings</code></p> Source code in <code>pydantic_settings_aws\\settings.py</code> <pre><code>class SecretsManagerBaseSettings(BaseSettings):\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; Tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            SecretsManagerSettingsSource(settings_cls),\n            env_settings,\n            dotenv_settings,\n            file_secret_settings,\n        )\n</code></pre>"},{"location":"configuration/aws/","title":"AWSBaseSettings","text":"<p>You can use <code>pydantic-settings-aws</code> to create your settings with data located both in Parameter Store and Secrets Manager.</p>"},{"location":"configuration/aws/#settingsconfigdict-options","title":"SettingsConfigDict options","text":"<p>You need to inform at least the Secrets Manager name, if you are using it as a data source.</p> <p>Parameter Store Settings</p> <p>If you are not using secrets manager as a data source, check ParameterStoreBaseSettings.</p>"},{"location":"configuration/aws/#settings-for-boto3-client-usage","title":"Settings for boto3 client usage","text":"Option Required? Description <code>ssm_client</code>  optional An existing boto3 client for Parameter Store if you already have one <code>secrets_client</code>  optional An existing boto3 client for Secrets Manager if you already have one <code>aws_region</code>  optional The region your Parameter Store lives. Used only if you don't inform a client <code>aws_profile</code>  optional An existing aws configured profile. Used only if you don't inform a client <code>aws_access_key_id</code>  optional A valid Access Key Id. Used only if you don't inform a client <code>aws_secret_access_key</code>  optional A valid Secret Access Key Id. Used only if you don't inform a client <code>aws_session_token</code>  optional A valid Session Token. Used only if you don't inform a client"},{"location":"configuration/aws/#define-which-service-you-field-is-using-with-annotated","title":"Define which service you field is using with Annotated","text":"<p>When you are using <code>AWSBaseSettings</code> you need to add at least a <code>dict</code> with the AWS service you are using.</p> <pre><code>class MongoDBSettings(AWSBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_client=my_secrets_client,\n        secrets_name=\"myservice/mongodb\",\n        ssm_client=my_ssm_client\n    )\n\n    username: Annotated[str, {\"service\": \"secrets\"}]\n    password: Annotated[str, {\"service\": \"secrets\"}]\n    server_host: Annotated[str, {\"service\": \"ssm\", \"ssm\": \"/databases/mongodb/host\"}]\n    server_port: Annotated[str, {\"service\": \"ssm\", \"ssm\": \"/databases/mongodb/port\"}]\n</code></pre>"},{"location":"configuration/aws/#single-secrets-multiple-parameter-store","title":"Single Secrets, multiple parameter store","text":"<p>At the moment you can only have one Secrets Manager source, but multiple parameter store.</p> <pre><code>class MongoDBSettings(AWSBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_client=my_secrets_client,\n        secrets_name=\"myservice/mongodb\"\n    )\n\n    username: Annotated[str, {\"service\": \"secrets\"}] # will use SettingsConfigDict\n    password: Annotated[str, {\"service\": \"secrets\"}] # will use SettingsConfigDict\n    host: Annotated[str, {\"ssm\": \"/dev/virginia/databases/mongodb/host\", \"ssm_client\": dev_virginia_client}] # will use dev_virginia_client\n    port: Annotated[str, {\"ssm\": \"/dev/saopaulo/databases/mongodb/host\", \"ssm_client\": dev_saopaulo_client}] # will use dev_saopaulo_client\n</code></pre>"},{"location":"configuration/aws/#settings-order","title":"Settings Order","text":"<p>First, <code>AWSBaseSettings</code> will try to load your data from either Parameter Store or Secrets Manager.</p> <p>If it can't find a value, <code>AWSBaseSettings</code> will still try to get your information from Environment, dotenv files and secret files.</p> <ul> <li>AWS SSM and Secrets Manager</li> <li>Environment variables</li> <li>dotenv files</li> <li>secret files</li> </ul>"},{"location":"configuration/parameter-store/","title":"Parameter Store","text":"<p>You can use <code>pydantic-settings-aws</code> to create your settings with data located in Systems Manager: Parameter Store.</p> <p>Parameter Store content</p> <p>The content of the the parameter store must be a <code>string</code>.</p>"},{"location":"configuration/parameter-store/#settingsconfigdict-options","title":"SettingsConfigDict options","text":"<p>There is no required setting that you must especify.</p>"},{"location":"configuration/parameter-store/#settings-for-boto3-client-usage","title":"Settings for boto3 client usage","text":"Option Required? Description <code>ssm_client</code>  optional An existing boto3 client for Parameter Store if you already have one <code>aws_region</code>  optional The region your Parameter Store lives. Used only if you don't inform a client <code>aws_profile</code>  optional An existing aws configured profile. Used only if you don't inform a client <code>aws_access_key_id</code>  optional A valid Access Key Id. Used only if you don't inform a client <code>aws_secret_access_key</code>  optional A valid Secret Access Key Id. Used only if you don't inform a client <code>aws_session_token</code>  optional A valid Session Token. Used only if you don't inform a client"},{"location":"configuration/parameter-store/#configure-your-parameter-store-with-annotated","title":"Configure your Parameter Store with Annotated","text":"<p>You can declare your settings without any annotated field. In case you this, <code>pydantic-settings-aws</code> will look for a parater store with the same name as your field.</p>"},{"location":"configuration/parameter-store/#specify-the-name-of-the-parameter","title":"Specify the name of the parameter","text":"<p>In case all your parameters are in the same AWS account and region, you can just annotate you field with a string:</p> <pre><code>class MongoDBSettings(ParameterStoreBaseSettings):\n    model_config = SettingsConfigDict(\n        ssm_client=my_ssm_client\n    )\n\n    server_host: Annotated[str, \"/databases/mongodb/host\"]\n</code></pre>"},{"location":"configuration/parameter-store/#multiple-regions-and-accounts","title":"Multiple regions and accounts","text":"<p>If you need to work with multiple accounts and/or regions, you can create a client for each account:</p> <pre><code>class MongoDBSettings(ParameterStoreBaseSettings):\n\n    prod_host: Annotated[str, {\"ssm\": \"/prod/databases/mongodb/host\", \"ssm_client\": prod_client}]\n    release_host: Annotated[str, {\"ssm\": \"/release/databases/mongodb/host\", \"ssm_client\": release_client}]\n    development_host: Annotated[str, {\"ssm\": \"/development/databases/mongodb/host\", \"ssm_client\": development_client}]\n</code></pre>"},{"location":"configuration/secrets-manager/","title":"Secrets Manager","text":"<p>You can use <code>pydantic-settings-aws</code> to create your settings with data located in AWS Secrets Manager.</p> <p>Secrets Manager content</p> <p>The content of the Secrets Manager must be a valid JSON.</p>"},{"location":"configuration/secrets-manager/#settingsconfigdict-options","title":"SettingsConfigDict options","text":"<p>There is only one required setting that you must especify: <code>secrets_name</code>.</p>"},{"location":"configuration/secrets-manager/#settings-for-boto3-client-usage","title":"Settings for boto3 client usage","text":"Option Required? Description <code>secrets_client</code>  optional An existing boto3 client for Secrets Manager if you already have one <code>aws_region</code>  optional The region your Secrets Manager lives. Used only if you don't inform a client <code>aws_profile</code>  optional An existing aws configured profile. Used only if you don't inform a client <code>aws_access_key_id</code>  optional A valid Access Key Id. Used only if you don't inform a client <code>aws_secret_access_key</code>  optional A valid Secret Access Key Id. Used only if you don't inform a client <code>aws_session_token</code>  optional A valid Session Token. Used only if you don't inform a client"},{"location":"configuration/secrets-manager/#settings-for-secrets-manager","title":"Settings for Secrets Manager","text":"Option Required? Description <code>secrets_name</code>  required The name of your Secrets Manager <code>secrets_version</code>  optional The version of your secret <code>secrets_stage</code>  optional The stage of your secret"},{"location":"examples/aws/","title":"Parameter Store","text":"<p>When working with <code>AWSBaseSettings</code>, you can work with multiple parameters living in the same account and region, or with multiple accounts / regions.</p> <p>The only restriction if for Secrets Manager. You can only use one secret / client / account / region at a time.</p>"},{"location":"examples/aws/#simplest-way","title":"Simplest way","text":"<p>The only required setting is your secret's name. All other configurations you can leave to boto3 to deal.</p> <pre><code>class ParameterStoreSettings(AWSBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\"\n    )\n\n    username: Annotated[str, {\"service\": \"secrets\"}]\n    password: Annotated[str, {\"service\": \"secrets\"}]\n    mongodb_host: Annotated[str, {\"service\": \"ssm\", \"ssm\": \"/mysystem/mongodb/host\"}]\n    mongodb_db_name: Annotated[str, {\"service\": \"ssm\"}] # will look for a parameter named mongodb_db_name\n    environment: str # not related to aws. If you have an environment named ENVIRONMENT, it will work as if you were using BaseSettings\n</code></pre> <p>In this case, <code>pydantic-settings-aws</code> will leave to boto3 to try to identify how he can connect to AWS.</p> <p>We don't shadow pydantic and boto3 errors</p> <p>In the above case, if for some reason any field is <code>None</code>, it will raise a pydantic's <code>ValidationError</code>.</p>"},{"location":"examples/parameter-store/","title":"Parameter Store","text":"<p>When working with <code>ParameterStoreBaseSettings</code>, you can work with parameters living in the same account and region, or with multiple accounts / regions.</p>"},{"location":"examples/parameter-store/#simplest-way","title":"Simplest way","text":"<p>The simplest way you can work with <code>ParameterStoreBaseSettings</code> is to leaving it all to boto3 and create your fields with the same name as your parameters:</p> <pre><code>class ParameterStoreSettings(ParameterStoreBaseSettings):\n    # no SettingsConfigDict\n\n    mongodb_host: str\n    mongodb_db_name: str\n</code></pre> <p>In this case, <code>pydantic-settings-aws</code> will leave to boto3 to try to identify how he can connect to AWS, and then will look for the parameters with name <code>mongodb_host</code> and <code>mongodb_db_name</code>.</p> <p>We don't shadow pydantic and boto3 errors</p> <p>In the above case, if for some reason mongodb_host is <code>None</code>, it will raise a pydantic's <code>ValidationError</code>.</p>"},{"location":"examples/parameter-store/#specifying-the-name-of-the-parameter","title":"Specifying the name of the parameter","text":"<p>For almost all cases, your parameter's name will be different from your field name.</p> <p>To deal with these cases, you must use <code>Annotated</code> and add the name of your parameter:</p> <pre><code>class DynamoDBSettings(ParameterStoreBaseSettings):\n    model_config = SettingsConfigDict(\n        ssm_client=my_ssm_client\n    )\n\n    db_name: Annotated[str, \"/databases/dynamodb/payments/dbname\"]\n</code></pre>"},{"location":"examples/parameter-store/#multiple-accounts-and-regions","title":"Multiple accounts and regions","text":"<p>If you need to work with multiple accounts or regions, you can use <code>Annotated</code> and specify a <code>dict</code>:</p> <pre><code>{\n    \"ssm\": \"parameter name\",\n    \"ssm_client\": my_boto3_client\n}\n</code></pre> <pre><code>class MongoDBSettings(ParameterStoreBaseSettings):\n\n    prod_host: Annotated[str, {\"ssm\": \"/prod/databases/mongodb/host\", \"ssm_client\": prod_client}]\n    release_host: Annotated[str, {\"ssm\": \"/release/databases/mongodb/host\", \"ssm_client\": release_client}]\n    development_host: Annotated[str, {\"ssm\": \"/development/databases/mongodb/host\", \"ssm_client\": development_client}]\n</code></pre>"},{"location":"examples/secrets-manager/","title":"Secrets Manager","text":"<p>For more information about all the options and settings, refer to Configuring Secrets Manager</p>"},{"location":"examples/secrets-manager/#using-your-boto3-client","title":"Using your boto3 client","text":"<p>You can use an already created <code>boto3 client</code>.</p> <p>All you need to do is to add <code>secrets_client</code> to your <code>SettingsConfigDict</code>.</p> <pre><code>import boto3\nfrom pydantic_settings_aws import SecretsManagerBaseSettings\n\nclient = boto3.client(\"secretsmanager\")\n\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\",\n        secrets_client=client\n    )\n\n    username: str\n    password: str\n</code></pre> <p>And now, if your secrets has the format:</p> <pre><code>{\n    \"username\": \"my-awesome-user-name\",\n    \"password\": \"really-strong-password\"\n}\n</code></pre> <p>You can just create your settings, and everything will be allright:</p> <pre><code>settings = AWSSecretsSettings()\n</code></pre>"},{"location":"examples/secrets-manager/#getting-specific-version-and-stage-of-the-secret","title":"Getting specific version and stage of the secret","text":"<pre><code>from pydantic_settings_aws import SecretsManagerBaseSettings\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\",\n        secrets_version=\"2\",\n        secrets_stage=\"AWSCURRENT\"\n    )\n\n    username: str\n    password: str\n</code></pre>"},{"location":"examples/secrets-manager/#with-aws-profile-name","title":"With AWS profile name","text":"<pre><code>from pydantic_settings_aws import SecretsManagerBaseSettings\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\",\n        aws_profile=\"DEV\",\n        aws_region=\"sa-east-1\"\n    )\n\n    username: str\n    password: str\n</code></pre>"},{"location":"examples/secrets-manager/#with-access-key","title":"With access key","text":"<pre><code>from pydantic_settings_aws import SecretsManagerBaseSettings\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\",\n        aws_region=\"us-east-1\",\n        aws_access_key_id=\"my_aws_access_key_id\",\n        aws_secret_access_key=\"my_aws_secret_access_key\",\n        aws_session_token=\"my_aws_session_token\"\n    )\n\n    username: str\n    password: str\n</code></pre>"},{"location":"examples/secrets-manager/#with-iam-identity-center-sso","title":"With IAM Identity Center (SSO)","text":"<p>Just login with sso:</p> <pre><code>aws sso login --profile DEV\n</code></pre> <p>And then you can leave all empty:</p> <pre><code>from pydantic_settings_aws import SecretsManagerBaseSettings\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\"\n    )\n\n    username: str\n    password: str\n</code></pre>"}]}