{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pydantic Settings AWS","text":"<p>Pydantic Settings AWS is an extension of the great Pydantic Settings library.</p> <p>It offers an easy way to load AWS settings from Secrets Manager.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install pydantic-settings-aws with pip:</p> <pre><code>pip install pydantic-settings-aws\n</code></pre> <p><code>pydantic-settings-aws</code> will install some dependencies for you:</p> <ul> <li>pydantic &gt;= 2.0.1</li> <li>pydantic-settings &gt;= 2.0.2</li> <li>boto3 &gt;= 1.27.0</li> <li>boto3-stubs[secretsmanager] &gt;= 1.27.0</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Using pydantic-settings-aws can be as easy as:</p> no boto3with boto3 clientwith profile settings.py<pre><code># import pydantic_settings_aws\nfrom pydantic_settings_aws import SecretsManagerBaseSettings\n\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\" # just put your secrets manager name\n    )\n\n    username: str\n    password: str\n\n\nsettings = AWSSecretsSettings()\n</code></pre> settings.py<pre><code>import boto3\nfrom pydantic_settings_aws import SecretsManagerBaseSettings\n\nclient = boto3.client(\"secretsmanager\")\n\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        secrets_name=\"my/secret\", # just put your secrets manager name\n        secrets_client=client # pass your already created boto3 client\n    )\n\n    username: str\n    password: str\n\n\nsettings = AWSSecretsSettings()\n</code></pre> settings.py<pre><code>from pydantic_settings_aws import SecretsManagerBaseSettings\n\n\nclass AWSSecretsSettings(SecretsManagerBaseSettings):\n    model_config = SettingsConfigDict(\n        aws_region=\"us-east-1\",\n        aws_profile=\"dev\"\n    )\n\n    username: str\n    password: str\n\n\nsettings = AWSSecretsSettings()\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>               Bases: <code>BaseSettings</code></p> Source code in <code>pydantic_settings_aws\\settings.py</code> <pre><code>class SecretsManagerBaseSettings(BaseSettings):\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            SecretsManagerSettingsSource(settings_cls),\n            env_settings,\n            dotenv_settings,\n            file_secret_settings,\n        )\n</code></pre>"}]}